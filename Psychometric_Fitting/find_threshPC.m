function [options,results,zFA] = find_threshPC(data_to_fit,options)
%[options,results] = find_threshPC(data_to_fit,options)
%
%This function determines the percent correct value at which d' ==
%threshold. We use this value as the value at which psignifit 4 should
%calculate threshold and CIs.
%
%Input variables:
%   data_to_fit: M x 3 matrix arranged as [stimulus value, n_yes, n_trials]
%                        (stimulus values are already in dB re: 100% depth)
%               Note that the first row in data_to_fit is assumed to
%               contain data representing catch trials.
%                   data_to_fit(1,1) = 0; % or whatever the catch trial
%                                         % 'stimulus' value is
%                   data_to_fit(1,2) = nFA; % number of false alarm trials
%                   data_to_fit(1,3) = nCatchTrials; % number of catch trials
%
%   options: structure given by setOptions function for fitting
%
%Output variables:
%   options: updated options structure with percent correct value
%   results: structure generated by psignifit 4
%
%Written by ML Caras Dec 5 2016

% DJS Jan 17, 2025: updated comments

n_fa = data_to_fit(1,2);
n_safe = data_to_fit(1,3); % DS: This parameter is called `n_safe`, but I assume it is actually the number of catch trials, not correct rejects

% MML edit
% zFA = sqrt(2)*erfinv(2*(n_fa/n_safe)-1);
zFA = norminv(n_fa/n_safe);

zThresh = options.dprimeThresh+zFA;
options.threshPC = (erf(zThresh/sqrt(2))+1)/2;  % MML: not sure what this is; DS: This is used by psignifit and is the percent correct at the dprime threshold (typically d' == 1)

%Fit the data
results = psignifit(data_to_fit,options);

%Remove fields that are much too large to be worth saving
results = rmfield(results,'Posterior');
results = rmfield(results,'weight');